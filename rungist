#!/usr/bin/env node
'use strict';

const util = require('util');
const { exec } = require('child_process');
const runIt = util.promisify(exec);
const fs = require('fs');
const path = require('path');
const { options } = require(process.env.HOME + '/.env');
const program = require('commander');
const fetch = require('node-fetch');
const strip = require('strip-ansi');

function sendCreateRequest (inputJSON) {
  let rArgs = {
    method: 'POST',
    headers: {
      'User-Agent': options.UA,
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.github.v3+json',
      'Authorization': 'token ' + options.GHTOKEN
    },
    body: inputJSON
  };

  return fetch('https://api.github.com/gists', rArgs)
    .then(res => {
      if (res.status > 201) {
        console.error('RequestFailure');
        console.dir(res);
        process.exit(1);
      }
      return res.json();
    })
    .then(json => {
      if (!json || !json.html_url) {
        console.error('JSONFailure');
        console.dir(json);
        process.exit(1);
      }
      console.log(json.html_url);
    })
    .catch(err => {
      console.error(err);
      process.exit(1);
    });
}

function makeObjects(arr) {
  return arr.map((file) => {
    let contents = fs.readFileSync(file, 'utf8');
    let p = path.basename(file);
    let ret = {};
    ret[p] = { content: contents };
    return ret;
  });
}

async function main (program) {
  const data = {
    public: program.public || false,
    description: program.description,
    files: {}
  };

  const files = [];
  const text = fs.readFileSync(program.run, 'utf8');
  const command = {};
  const fName = program.run.replace(/^\.\//,'');
  command[fName] = {
    content: text
  };

  const textLines = text.split('\n');
  textLines.forEach(function (line) {
    let re = /.* require\('(\.\/[.\w]+)'\)/;
    let match = re.exec(line);
    if (match) {
      files.push(match[1]);
    }
  });

  const outputFiles = makeObjects(files);
  outputFiles.unshift(command);

  const { stdout } = await runIt(program.run);
  const outString = `$: ${program.run}\n${stdout}\n$: `;
  const output = {
    'output.txt': {
      content: strip(outString)
    }
  };

  outputFiles.push(output);

  outputFiles.forEach((file) => {
    let key = Object.keys(file)[0];
    data.files[key] = { content: file[key].content };
  });

  const bodyData = JSON.stringify(data);
  sendCreateRequest(bodyData);
}

program.storeOptionsAsProperties(true);
program.version('0.0.1')
  .description('Run a command, make a gist with the command and output')
  .option('-p, --public', 'Make a public gist')
  .option('-d, --description <str>', 'Gist Description')
  .option('-r, --run <command>', 'Command to run')
  .parse(process.argv);

main(program);
